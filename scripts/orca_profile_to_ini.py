#!/usr/bin/env python3
"""
OrcaSlicer Profile to INI Converter

This script converts OrcaSlicer JSON printer profiles to INI format that can be
used with Android SliceBeam app. It resolves inheritance chains and creates
a flattened configuration suitable for import.

Usage:
    python orca_profile_to_ini.py --profile "Bambu Lab X1 Carbon 0.4 nozzle" --output printer.ini
    python orca_profile_to_ini.py --vendor "BBL" --list-profiles
    python orca_profile_to_ini.py --batch --vendor "BBL" --output-dir ./exported_profiles
"""

import os
import json
import argparse
import sys
from pathlib import Path
from typing import Dict, List, Optional, Union


class OrcaProfileConverter:
    def __init__(self, profiles_base_path: str):
        self.profiles_base_path = Path(profiles_base_path)
        self.loaded_profiles = {}  # Cache for loaded profiles
        
    def load_profile_json(self, file_path: Path) -> Dict:
        """Load and cache a JSON profile file."""
        file_path_str = str(file_path)
        if file_path_str in self.loaded_profiles:
            return self.loaded_profiles[file_path_str]
            
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                profile = json.load(f)
                self.loaded_profiles[file_path_str] = profile
                return profile
        except Exception as e:
            print(f"Error loading profile {file_path}: {e}")
            return {}
    
    def find_profile_file(self, vendor: str, profile_name: str) -> Optional[Path]:
        """Find the JSON file for a given profile name within a vendor."""
        vendor_dir = self.profiles_base_path / vendor
        if not vendor_dir.exists():
            return None
            
        # Check machine directory first
        machine_dir = vendor_dir / "machine"
        if machine_dir.exists():
            for json_file in machine_dir.glob("*.json"):
                profile = self.load_profile_json(json_file)
                if profile.get("name") == profile_name:
                    return json_file
        
        # Check root vendor directory
        for json_file in vendor_dir.glob("*.json"):
            profile = self.load_profile_json(json_file)
            if profile.get("name") == profile_name:
                return json_file
                
        return None
    
    def resolve_inheritance(self, profile: Dict, vendor: str) -> Dict:
        """Resolve the inheritance chain for a profile."""
        if "inherits" not in profile or not profile["inherits"]:
            return profile
            
        parent_name = profile["inherits"]
        parent_file = self.find_profile_file(vendor, parent_name)
        
        if not parent_file:
            print(f"Warning: Could not find parent profile '{parent_name}' for vendor '{vendor}'")
            return profile
            
        parent_profile = self.load_profile_json(parent_file)
        if not parent_profile:
            return profile
            
        # Recursively resolve parent's inheritance
        resolved_parent = self.resolve_inheritance(parent_profile, vendor)
        
        # Merge parent into current profile (current profile takes precedence)
        merged_profile = resolved_parent.copy()
        merged_profile.update(profile)
        
        return merged_profile
    
    def convert_value_to_ini(self, value: Union[str, int, float, List, bool]) -> str:
        """Convert a JSON value to INI string format."""
        if isinstance(value, bool):
            return "1" if value else "0"
        elif isinstance(value, list):
            if len(value) == 1:
                return str(value[0])
            else:
                # Format arrays as semicolon-separated values
                return ";".join(str(v) for v in value)
        elif value is None:
            return ""
        else:
            return str(value)
    
    def profile_to_ini(self, profile: Dict) -> str:
        """Convert a resolved profile to INI format."""
        ini_lines = []
        
        # Add header comment
        profile_name = profile.get("name", "Unknown Profile")
        ini_lines.append(f"# OrcaSlicer Profile: {profile_name}")
        ini_lines.append(f"# Generated by orca_profile_to_ini.py")
        ini_lines.append("")
        
        # Skip metadata fields that aren't printer settings
        skip_keys = {
            "type", "name", "inherits", "from", "instantiation", 
            "setting_id", "default_filament_profile", "default_print_profile",
            "upward_compatible_machine"
        }
        
        # Convert profile to INI key=value format
        for key, value in sorted(profile.items()):
            if key in skip_keys:
                continue
                
            ini_value = self.convert_value_to_ini(value)
            ini_lines.append(f"{key} = {ini_value}")
        
        return "\n".join(ini_lines)
    
    def get_vendor_profiles(self, vendor: str) -> List[str]:
        """Get list of all instantiation profiles for a vendor."""
        profiles = []
        vendor_dir = self.profiles_base_path / vendor
        
        if not vendor_dir.exists():
            return profiles
            
        machine_dir = vendor_dir / "machine"
        if machine_dir.exists():
            for json_file in machine_dir.glob("*.json"):
                profile = self.load_profile_json(json_file)
                if profile.get("instantiation") == "true":
                    profiles.append(profile.get("name", json_file.stem))
        
        return sorted(profiles)
    
    def convert_profile(self, vendor: str, profile_name: str) -> Optional[str]:
        """Convert a specific profile to INI format."""
        profile_file = self.find_profile_file(vendor, profile_name)
        if not profile_file:
            print(f"Error: Profile '{profile_name}' not found in vendor '{vendor}'")
            return None
            
        profile = self.load_profile_json(profile_file)
        if not profile:
            return None
            
        # Resolve inheritance chain
        resolved_profile = self.resolve_inheritance(profile, vendor)
        
        # Convert to INI
        return self.profile_to_ini(resolved_profile)


def list_vendors(profiles_path: str) -> List[str]:
    """List all available vendors."""
    vendors = []
    profiles_dir = Path(profiles_path)
    
    for item in profiles_dir.iterdir():
        if item.is_dir() and not item.name.startswith('.'):
            vendors.append(item.name)
    
    return sorted(vendors)


def main():
    parser = argparse.ArgumentParser(
        description="Convert OrcaSlicer JSON profiles to INI format for SliceBeam",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  List all vendors:
    python orca_profile_to_ini.py --list-vendors
    
  List profiles for a vendor:
    python orca_profile_to_ini.py --vendor "BBL" --list-profiles
    
  Convert single profile:
    python orca_profile_to_ini.py --vendor "BBL" --profile "Bambu Lab X1 Carbon 0.4 nozzle" --output x1c.ini
    
  Convert all profiles for a vendor:
    python orca_profile_to_ini.py --vendor "BBL" --batch --output-dir ./exported
        """
    )
    
    # Get the default profiles path relative to this script
    script_dir = Path(__file__).parent
    default_profiles_path = script_dir.parent / "resources" / "profiles"
    
    parser.add_argument(
        "--profiles-path", 
        default=str(default_profiles_path),
        help="Path to OrcaSlicer profiles directory"
    )
    
    parser.add_argument("--list-vendors", action="store_true", help="List all available vendors")
    
    parser.add_argument("--vendor", help="Vendor name (e.g., 'BBL', 'Prusa')")
    parser.add_argument("--list-profiles", action="store_true", help="List all profiles for the specified vendor")
    
    parser.add_argument("--profile", help="Profile name to convert")
    parser.add_argument("--output", help="Output INI file path")
    
    parser.add_argument("--batch", action="store_true", help="Convert all profiles for the vendor")
    parser.add_argument("--output-dir", help="Output directory for batch conversion")
    
    args = parser.parse_args()
    
    if not Path(args.profiles_path).exists():
        print(f"Error: Profiles path '{args.profiles_path}' does not exist")
        return 1
    
    # List vendors
    if args.list_vendors:
        vendors = list_vendors(args.profiles_path)
        print("Available vendors:")
        for vendor in vendors:
            print(f"  {vendor}")
        return 0
    
    if not args.vendor:
        print("Error: --vendor is required")
        return 1
    
    converter = OrcaProfileConverter(args.profiles_path)
    
    # List profiles for vendor
    if args.list_profiles:
        profiles = converter.get_vendor_profiles(args.vendor)
        print(f"Available profiles for {args.vendor}:")
        for profile in profiles:
            print(f"  {profile}")
        return 0
    
    # Batch conversion
    if args.batch:
        if not args.output_dir:
            print("Error: --output-dir is required for batch conversion")
            return 1
            
        output_dir = Path(args.output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)
        
        profiles = converter.get_vendor_profiles(args.vendor)
        if not profiles:
            print(f"No instantiation profiles found for vendor '{args.vendor}'")
            return 1
            
        for profile_name in profiles:
            ini_content = converter.convert_profile(args.vendor, profile_name)
            if ini_content:
                # Create safe filename
                safe_name = "".join(c for c in profile_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
                safe_name = safe_name.replace(' ', '_')
                output_file = output_dir / f"{safe_name}.ini"
                
                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write(ini_content)
                print(f"Converted: {profile_name} -> {output_file}")
            else:
                print(f"Failed to convert: {profile_name}")
        
        return 0
    
    # Single profile conversion
    if not args.profile:
        print("Error: --profile is required for single conversion")
        return 1
        
    if not args.output:
        print("Error: --output is required for single conversion")
        return 1
    
    ini_content = converter.convert_profile(args.vendor, args.profile)
    if not ini_content:
        return 1
    
    with open(args.output, 'w', encoding='utf-8') as f:
        f.write(ini_content)
    
    print(f"Successfully converted '{args.profile}' to '{args.output}'")
    return 0


if __name__ == "__main__":
    sys.exit(main())